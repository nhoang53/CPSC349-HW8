{"ast":null,"code":"import _slicedToArray from \"D:\\\\Fullerton\\\\CPSC 349 Front End web development\\\\React tutorial\\\\tic-tac-toe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Fullerton\\\\CPSC 349 Front End web development\\\\React tutorial\\\\tic-tac-toe\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // class Square extends React.Component {\n//   render() {\n//       return (\n//         <button\n//           className=\"square\"\n//           onClick={() => this.props.onClick()}\n//         >\n//           {this.props.value}\n//         </button>\n//       );\n//     }\n// }\n// class Board extends React.Component {\n//   handleClick(i) {\n//    const squares = this.state.squares.slice();\n//    if (calculateWinner(squares) || squares[i]) {\n//      return;\n//    }\n//    squares[i] = this.state.xIsNext ? 'X' : 'O';\n//    this.setState({\n//      squares: squares,\n//      xIsNext: !this.state.xIsNext,\n//    });\n//  }\n//\n//  renderSquare(i) {\n//    return (\n//      <Square\n//        value={this.props.squares[i]}\n//        onClick={() => this.props.onClick(i)}\n//      />\n//    );\n//  }\n//\n//  render() {\n//     return (\n//       <div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(0)}\n//           {this.renderSquare(1)}\n//           {this.renderSquare(2)}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(3)}\n//           {this.renderSquare(4)}\n//           {this.renderSquare(5)}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(6)}\n//           {this.renderSquare(7)}\n//           {this.renderSquare(8)}\n//         </div>\n//       </div>\n//     );\n//   }\n//\n// }\n//\n// class Game extends React.Component {\n//   render() {\n//     return (\n//       <div className=\"game\">\n//         <div className=\"game-board\">\n//           <Board />\n//         </div>\n//         <div className=\"game-info\">\n//           <div>{/* status */}</div>\n//           <ol>{/* TODO */}</ol>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\nfunction Square(props) {\n  const className = 'square' + (props.hightlight ? ' hightlight' : '');\n  return React.createElement(\"button\", {\n    className: className,\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return React.createElement(Square, {\n      key: i,\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      hightlight: winLine && winLine.includes(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    // use 2 FOR loops to make the squares\n    const boardSize = 3;\n    let squares = [];\n\n    for (let i = 0; i < boardSize; ++i) {\n      let row = [];\n\n      for (let j = 0; j < boardSize; ++j) {\n        row.push(this.renderSquare(i * boardSize + j));\n      }\n\n      squares.push(React.createElement(\"div\", {\n        key: i,\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \" \", row, \" \"));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \" \", squares, \" \"); // return (\n    //   <div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(0)}\n    //       {this.renderSquare(1)}\n    //       {this.renderSquare(2)}\n    //     </div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(3)}\n    //       {this.renderSquare(4)}\n    //       {this.renderSquare(5)}\n    //     </div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(6)}\n    //       {this.renderSquare(7)}\n    //       {this.renderSquare(8)}\n    //     </div>\n    //   </div>\n    // );\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isAscending: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        // coordinates of each move (row, col)\n        latestMoveSquare: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  handleSortToggle() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const winInfo = calculateWinner(current.squares);\n    const winner = winInfo.winner;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    let moves = history.map((step, move) => {\n      const latestMoveSquare = step.latestMoveSquare;\n      const col = 1 + latestMoveSquare % 3;\n      const row = 1 + Math.floor(latestMoveSquare / 3);\n      const desc = move ? // + move\n      'Go to move #' + move + ' (' + row + ',' + col + ')' : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        className: move === stepNumber ? 'currently-selected-item' : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      if (winInfo.isDraw) {\n        status = \"Draw\";\n      } else {\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      }\n    } // return (\n    //   <div className=\"game\">\n    //     <div className=\"game-board\">\n    //       <Board\n    //         squares={current.squares}\n    //         onClick={i => this.handleClick(i)}\n    //       />\n    //     </div>\n    //     <div className=\"game-info\">\n    //       <div>{status}</div>\n    //       <ol>{moves}</ol>\n    //     </div>\n    //   </div>\n    // );\n\n\n    const isAscending = this.state.isAscending;\n\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i) // winLine={winInfo.line}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      onClick: () => this.handleSortToggle(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, isAscending ? 'descending' : 'ascending'), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, moves)));\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 265\n  },\n  __self: this\n}), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n} // ReactDOM.render(\n//   <Game />,\n//   document.getElementById('root')\n// );\n//\n// function calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2, 3],\n//     [4, 5, 6, 7],\n//     [8, 9, 10, 11],\n//     [12, 13, 14, 15],\n//     [0, 4, 8, 12],\n//     [1, 5, 9, 13],\n//     [2, 6, 10, 14],\n//     [3, 7, 11, 15],\n//\n//   ];\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c, d] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]\n//         && squares[a] === squares[d]){\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }","map":{"version":3,"sources":["D:/Fullerton/CPSC 349 Front End web development/React tutorial/tic-tac-toe/src/index.js"],"names":["React","ReactDOM","Square","props","className","hightlight","onClick","value","Board","Component","renderSquare","i","winLine","squares","includes","render","boardSize","row","j","push","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","isAscending","handleClick","slice","current","length","calculateWinner","winner","setState","concat","latestMoveSquare","jumpTo","step","handleSortToggle","winInfo","moves","map","move","col","Math","floor","desc","status","isDraw","reverse","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n// class Square extends React.Component {\r\n//   render() {\r\n//       return (\r\n//         <button\r\n//           className=\"square\"\r\n//           onClick={() => this.props.onClick()}\r\n//         >\r\n//           {this.props.value}\r\n//         </button>\r\n//       );\r\n//     }\r\n// }\r\n\r\n// class Board extends React.Component {\r\n//   handleClick(i) {\r\n//    const squares = this.state.squares.slice();\r\n//    if (calculateWinner(squares) || squares[i]) {\r\n//      return;\r\n//    }\r\n//    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n//    this.setState({\r\n//      squares: squares,\r\n//      xIsNext: !this.state.xIsNext,\r\n//    });\r\n//  }\r\n//\r\n//  renderSquare(i) {\r\n//    return (\r\n//      <Square\r\n//        value={this.props.squares[i]}\r\n//        onClick={() => this.props.onClick(i)}\r\n//      />\r\n//    );\r\n//  }\r\n//\r\n//  render() {\r\n//     return (\r\n//       <div>\r\n//         <div className=\"board-row\">\r\n//           {this.renderSquare(0)}\r\n//           {this.renderSquare(1)}\r\n//           {this.renderSquare(2)}\r\n//         </div>\r\n//         <div className=\"board-row\">\r\n//           {this.renderSquare(3)}\r\n//           {this.renderSquare(4)}\r\n//           {this.renderSquare(5)}\r\n//         </div>\r\n//         <div className=\"board-row\">\r\n//           {this.renderSquare(6)}\r\n//           {this.renderSquare(7)}\r\n//           {this.renderSquare(8)}\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n//\r\n// }\r\n//\r\n// class Game extends React.Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"game\">\r\n//         <div className=\"game-board\">\r\n//           <Board />\r\n//         </div>\r\n//         <div className=\"game-info\">\r\n//           <div>{/* status */}</div>\r\n//           <ol>{/* TODO */}</ol>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nfunction Square(props) {\r\n  const className = 'square' + (props.hightlight ? ' hightlight' : '')\r\n  return (\r\n    <button className={className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    const winLine = this.props.winLine;\r\n    return ( <Square\r\n              key={i}\r\n              value={this.props.squares[i]}\r\n              onClick={() => this.props.onClick(i)}\r\n              hightlight={winLine && winLine.includes(i)}\r\n              /> );\r\n  }\r\n\r\n  render() {\r\n    // use 2 FOR loops to make the squares\r\n    const boardSize = 3;\r\n    let squares = [];\r\n    for(let i=0; i < boardSize; ++i)\r\n    {\r\n      let row = [];\r\n      for(let j = 0; j < boardSize; ++j){\r\n        row.push(this.renderSquare(i * boardSize + j));\r\n      }\r\n      squares.push(<div key={i} className=\"board-row\"> {row} </div>);\r\n    }\r\n\r\n    return (<div> {squares} </div>);\r\n    // return (\r\n    //   <div>\r\n    //     <div className=\"board-row\">\r\n    //       {this.renderSquare(0)}\r\n    //       {this.renderSquare(1)}\r\n    //       {this.renderSquare(2)}\r\n    //     </div>\r\n    //     <div className=\"board-row\">\r\n    //       {this.renderSquare(3)}\r\n    //       {this.renderSquare(4)}\r\n    //       {this.renderSquare(5)}\r\n    //     </div>\r\n    //     <div className=\"board-row\">\r\n    //       {this.renderSquare(6)}\r\n    //       {this.renderSquare(7)}\r\n    //       {this.renderSquare(8)}\r\n    //     </div>\r\n    //   </div>\r\n    // );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{squares: Array(9).fill(null)}],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isAscending: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          // coordinates of each move (row, col)\r\n          latestMoveSquare: i\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  handleSortToggle() {\r\n    this.setState({\r\n      isAscending: !this.state.isAscending\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const winInfo = calculateWinner(current.squares);\r\n    const winner = winInfo.winner;\r\n    const stepNumber = this.state.stepNumber;\r\n    const current = history[stepNumber];\r\n\r\n    let moves = history.map((step, move) => {\r\n      const latestMoveSquare = step.latestMoveSquare;\r\n      const col = 1 + latestMoveSquare % 3;\r\n      const row = 1 + Math.floor(latestMoveSquare / 3);\r\n      const desc = move ?\r\n       // + move\r\n        'Go to move #' +move+ ' (' + row +',' + col +')' :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}\r\n                className={move === stepNumber ? 'currently-selected-item' : ''}>\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n        if(winInfo.isDraw){\r\n          status = \"Draw\";\r\n        }else{\r\n          status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n        }\r\n      }\r\n\r\n    // return (\r\n    //   <div className=\"game\">\r\n    //     <div className=\"game-board\">\r\n    //       <Board\r\n    //         squares={current.squares}\r\n    //         onClick={i => this.handleClick(i)}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"game-info\">\r\n    //       <div>{status}</div>\r\n    //       <ol>{moves}</ol>\r\n    //     </div>\r\n    //   </div>\r\n    // );\r\n\r\n\r\n    const isAscending = this.state.isAscending;\r\n    if (!isAscending) {\r\n      moves.reverse();\r\n    }\r\n    \r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n            // winLine={winInfo.line}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button onClick={() => this.handleSortToggle()}>\r\n            {isAscending ? 'descending' : 'ascending'}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\n// ReactDOM.render(\r\n//   <Game />,\r\n//   document.getElementById('root')\r\n// );\r\n//\r\n// function calculateWinner(squares) {\r\n//   const lines = [\r\n//     [0, 1, 2, 3],\r\n//     [4, 5, 6, 7],\r\n//     [8, 9, 10, 11],\r\n//     [12, 13, 14, 15],\r\n//     [0, 4, 8, 12],\r\n//     [1, 5, 9, 13],\r\n//     [2, 6, 10, 14],\r\n//     [3, 7, 11, 15],\r\n//\r\n//   ];\r\n//   for (let i = 0; i < lines.length; i++) {\r\n//     const [a, b, c, d] = lines[i];\r\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]\r\n//         && squares[a] === squares[d]){\r\n//       return squares[a];\r\n//     }\r\n//   }\r\n//   return null;\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}