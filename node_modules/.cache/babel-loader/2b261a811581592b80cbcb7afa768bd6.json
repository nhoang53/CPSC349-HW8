{"ast":null,"code":"import _slicedToArray from \"D:\\\\Fullerton\\\\CPSC 349 Front End web development\\\\React tutorial\\\\tic-tac-toe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Fullerton\\\\CPSC 349 Front End web development\\\\React tutorial\\\\tic-tac-toe\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; //Input gamebaord\n\nlet size = 0;\n\nclass Size extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    boardSize = this.state.value;\n    alert('Game Board submitted: ' + boardSize);\n    event.preventDefault();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Input gameboard size you want:\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction Square(props) {\n  const className = 'square' + (props.highlight ? ' highlight' : '');\n  return React.createElement(\"button\", {\n    className: className,\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return React.createElement(Square, {\n      key: i,\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      highlight: winLine && winLine.includes(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    // Use two loops to make the squares\n    const boardSize = 3;\n    let squares = [];\n\n    for (let i = 0; i < boardSize; ++i) {\n      let row = [];\n\n      for (let j = 0; j < boardSize; ++j) {\n        row.push(this.renderSquare(i * boardSize + j));\n      }\n\n      squares.push(React.createElement(\"div\", {\n        key: i,\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, row));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, squares);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isAscending: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        // Store the index of the latest moved square\n        latestMoveSquare: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  handleSortToggle() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const winInfo = calculateWinner(current.squares);\n    const winner = winInfo.winner;\n    let moves = history.map((step, move) => {\n      const latestMoveSquare = step.latestMoveSquare;\n      const col = 1 + latestMoveSquare % 3;\n      const row = 1 + Math.floor(latestMoveSquare / 3);\n      const desc = move ? \"Go to move #\".concat(move, \" (\").concat(col, \", \").concat(row, \")\") : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: move === stepNumber ? 'currently-selected-item' : '',\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      if (winInfo.isDraw) {\n        status = \"No more move. No winner in this game.\";\n      } else {\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      }\n    }\n\n    const isAscending = this.state.isAscending;\n\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      winLine: winInfo.line,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: winInfo.isDraw === true ? 'status endGame' : 'status',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      onClick: () => this.handleSortToggle(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, isAscending ? 'descending' : 'ascending'), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, moves)));\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 204\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  class: \"status\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 205\n  },\n  __self: this\n}, \" \", React.createElement(GameBoard, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 205\n  },\n  __self: this\n}), \" \"), React.createElement(\"div\", {\n  class: \"status\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 206\n  },\n  __self: this\n}, \" \", React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 206\n  },\n  __self: this\n}), \" \")), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i],\n        isDraw: false\n      };\n    }\n  }\n\n  let isDraw = true;\n\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw\n  };\n}","map":{"version":3,"sources":["D:/Fullerton/CPSC 349 Front End web development/React tutorial/tic-tac-toe/src/index.js"],"names":["React","ReactDOM","size","Size","Component","constructor","props","state","value","handleChange","bind","handleSubmit","event","setState","target","boardSize","alert","preventDefault","render","Square","className","highlight","onClick","Board","renderSquare","i","winLine","squares","includes","row","j","push","Game","history","Array","fill","stepNumber","xIsNext","isAscending","handleClick","slice","current","length","calculateWinner","winner","concat","latestMoveSquare","jumpTo","step","handleSortToggle","winInfo","moves","map","move","col","Math","floor","desc","status","isDraw","reverse","line","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n//Input gamebaord\r\nlet size = 0;\r\n\r\nclass Size extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n\r\n    boardSize = this.state.value;\r\n    alert('Game Board submitted: ' + boardSize);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Input gameboard size you want:\r\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Square(props) {\r\n  const className = 'square' + (props.highlight ? ' highlight' : '');\r\n  return (\r\n    <button\r\n      className={className}\r\n      onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    const winLine = this.props.winLine;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        highlight={winLine && winLine.includes(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // Use two loops to make the squares\r\n    const boardSize = 3;\r\n    let squares = [];\r\n    for (let i = 0; i < boardSize; ++i) {\r\n      let row = [];\r\n      for (let j = 0; j < boardSize; ++j) {\r\n        row.push(this.renderSquare(i * boardSize + j));\r\n      }\r\n      squares.push(<div key={i} className=\"board-row\">{row}</div>);\r\n    }\r\n\r\n    return (\r\n      <div>{squares}</div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isAscending: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          // Store the index of the latest moved square\r\n          latestMoveSquare: i\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  handleSortToggle() {\r\n    this.setState({\r\n      isAscending: !this.state.isAscending\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const stepNumber = this.state.stepNumber;\r\n    const current = history[stepNumber];\r\n    const winInfo = calculateWinner(current.squares);\r\n    const winner = winInfo.winner;\r\n\r\n    let moves = history.map((step, move) => {\r\n      const latestMoveSquare = step.latestMoveSquare;\r\n      const col = 1 + latestMoveSquare % 3;\r\n      const row = 1 + Math.floor(latestMoveSquare / 3);\r\n      const desc = move ?\r\n        `Go to move #${move} (${col}, ${row})` :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          {/* Bold the currently selected item */ }\r\n          <button\r\n            className={move === stepNumber ? 'currently-selected-item' : ''}\r\n            onClick={() => this.jumpTo(move)}>{desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      if (winInfo.isDraw) {\r\n        status = \"No more move. No winner in this game.\";\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n    }\r\n\r\n    const isAscending = this.state.isAscending;\r\n    if (!isAscending) {\r\n      moves.reverse();\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n            winLine={winInfo.line}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div className={winInfo.isDraw === true ? 'status endGame' : 'status'}>{status}</div>\r\n          <button onClick={() => this.handleSortToggle()}>\r\n            {isAscending ? 'descending' : 'ascending'}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <div class = \"status\"> <GameBoard/> </div>\r\n    <div class = \"status\"> <Game/> </div>\r\n  </div>, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        line: lines[i],\r\n        isDraw: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  let isDraw = true;\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === null) {\r\n      isDraw = false;\r\n      break;\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    line: null,\r\n    isDraw: isDraw,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}